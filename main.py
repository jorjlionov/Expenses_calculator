import telebot as t
import sqlite3 as sql
from datetime import datetime
import random as r
import os
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN') or '7801880044:AAEXNKInMFvEosUPhtU3klUb9h_fJw_RA2w'

abc = 'üí¥üíµüí∂üí∑üí∏üí≥'

bot = t.TeleBot(TELEGRAM_BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sql.connect('finance.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT
)
''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    amount REAL,
    category TEXT,
    date TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
)
''')

# –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü user_id, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
try:
    cursor.execute("SELECT user_id FROM transactions LIMIT 1")
except sql.OperationalError:
    # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–∞ user_id –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    cursor.execute('ALTER TABLE transactions ADD COLUMN user_id INTEGER')
conn.commit()

def get_random_emoji():
    return abc[r.randint(0, 5)]

@bot.message_handler(commands=['start'])
def welcome_send(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
    conn.commit()

    bot.reply_to(
        message,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤. \n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_salary ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥\n"
        "/add_expense ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "/month_report ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü\n"
        "/total_report ‚Äî –æ–±—â–∏–π –æ—Ç—á—ë—Ç"
    )

@bot.message_handler(commands=['add_salary'])
def add_salary(message):
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –¥–æ—Ö–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50000 –∑–∞—Ä–ø–ª–∞—Ç–∞')
    bot.register_next_step_handler(message, process_salary)

def process_salary(message):
    try:
        user_id = message.from_user.id
        amount, category = message.text.split(maxsplit=1)
        amount = float(amount)
        date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        emoji = get_random_emoji()

        cursor.execute('''
        INSERT INTO transactions (user_id, type, amount, category, date)
        VALUES (?, ?, ?, ?, ?)
        ''', (user_id, 'income', amount, category, date))
        conn.commit()

        bot.reply_to(message, f'–î–æ—Ö–æ–¥ {amount}{emoji} ({category}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
    except ValueError:
        if message.text.startswith('/'):
            bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.')
        else:
            bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.')

@bot.message_handler(commands=['add_expense'])
def add_expense(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –µ–¥–∞')
    bot.register_next_step_handler(message, process_expenses)

def process_expenses(message):
    try:
        user_id = message.from_user.id
        amount, category = message.text.split(maxsplit=1)
        amount = float(amount)
        date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        emoji = get_random_emoji()

        cursor.execute('''
        INSERT INTO transactions (user_id, type, amount, category, date)
        VALUES (?, ?, ?, ?, ?)
        ''', (user_id, 'expense', amount, category, date))
        conn.commit()

        bot.reply_to(message, f'–†–∞—Å—Ö–æ–¥ {amount}{emoji} ({category}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
    except ValueError:
        if message.text.startswith('/'):
            bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.')
        else:
            bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.')

@bot.message_handler(commands=['month_report'])
def monthly_report(message):
    user_id = message.from_user.id
    current_month = datetime.now().strftime('%Y-%m')

    cursor.execute('''
    SELECT type, SUM(amount), category FROM transactions
    WHERE user_id = ? AND strftime('%Y-%m', date) = ?
    GROUP BY type, category
    ''', (user_id, current_month))
    results = cursor.fetchall()

    if not results:
        bot.reply_to(message, '–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π üò∂‚Äçüå´Ô∏è')
        return

    report = f'–û—Ç—á—ë—Ç –∑–∞ {current_month}: \n'
    total_income = 0
    total_expense = 0
    
    for row in results:
        transaction_type, total, category = row
        report += f'{transaction_type.capitalize()}: {total} ({category})\n'
        
        if transaction_type == 'income':
            total_income += total
        elif transaction_type == 'expense':
            total_expense += total
    
    balance = total_income - total_expense
    report += f'\n–ò—Ç–æ–≥–æ:\n–î–æ—Ö–æ–¥—ã: {total_income}\n–†–∞—Å—Ö–æ–¥—ã: {total_expense}\n'
    
    if balance > 0:
        report += f'–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: +{balance}—Ä (–ø—Ä–∏–±—ã–ª—å)'
    elif balance < 0:
        report += f'–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {balance}—Ä (—Ä–∞—Å—Ö–æ–¥)'
    else:
        report += '–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 0‚ÇΩ (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ)'

    bot.reply_to(message, report)

@bot.message_handler(commands=['total_report'])
def total_report(message):
    user_id = message.from_user.id

    cursor.execute('''
    SELECT type, SUM(amount) FROM transactions
    WHERE user_id = ?
    GROUP BY type
    ''', (user_id,))
    results = cursor.fetchall()

    if not results:
        bot.reply_to(message, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.")
        return

    report = "–û–±—â–∏–π –æ—Ç—á—ë—Ç:\n"
    total_income = 0
    total_expense = 0
    
    for row in results:
        transaction_type, total = row
        report += f"{transaction_type.capitalize()}: {total}\n"
        
        if transaction_type == 'income':
            total_income += total
        elif transaction_type == 'expense':
            total_expense += total
    
    balance = total_income - total_expense
    report += f'\n–ò—Ç–æ–≥–æ:\n–î–æ—Ö–æ–¥—ã: {total_income}\n–†–∞—Å—Ö–æ–¥—ã: {total_expense}\n'
    
    if balance > 0:
        report += f'–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: +{balance}‚ÇΩ (–ø—Ä–∏–±—ã–ª—å)'
    elif balance < 0:
        report += f'–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {balance}‚ÇΩ (—Ä–∞—Å—Ö–æ–¥)'
    else:
        report += '–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 0‚ÇΩ (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ)'

    bot.reply_to(message, report)

if __name__ == "__main__":
    bot.polling(none_stop=True)
